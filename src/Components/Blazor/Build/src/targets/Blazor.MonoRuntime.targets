<Project>

  <PropertyGroup>
    <BlazorLinkOnBuild Condition="$(BlazorLinkOnBuild) == ''">true</BlazorLinkOnBuild>
    <_BlazorBuiltInBclLinkerDescriptor>$(MSBuildThisFileDirectory)BuiltInBclLinkerDescriptor.xml</_BlazorBuiltInBclLinkerDescriptor>
    
    <!-- /obj/<<configuration>>/<<targetframework>>/blazor -->
    <BlazorIntermediateOutputPath>$(IntermediateOutputPath)$(BaseBlazorIntermediateOutputPath)</BlazorIntermediateOutputPath>

    <!-- /obj/<<configuration>>/<<targetframework>>/blazor/linker.descriptor.xml -->
    <GeneratedBlazorLinkerDescriptor>$(BlazorIntermediateOutputPath)linker.descriptor.xml</GeneratedBlazorLinkerDescriptor>

    <!-- /obj/<<configuration>>/<<targetframework>>/blazor/linker/ -->
    <BlazorIntermediateLinkerOutputPath>$(BlazorIntermediateOutputPath)linker/</BlazorIntermediateLinkerOutputPath>

    <!-- /obj/<<configuration>>/<<targetframework>>/blazor/blazor.boot.json -->
    <BlazorBootJsonIntermediateOutputPath>$(BlazorIntermediateOutputPath)$(BlazorBootJsonName)</BlazorBootJsonIntermediateOutputPath>

    <BlazorRuntimeBinOutputPath>$(TargetDir)$(BaseBlazorRuntimeBinOutputPath)</BlazorRuntimeBinOutputPath>

    <_BlazorLinkerOutputCache>$(IntermediateOutputPath)blazor.linker.output</_BlazorLinkerOutputCache>
  </PropertyGroup>

  <Target
    Name="_BlazorCopyFilesToOutputDirectory"
    DependsOnTargets="PrepareBlazorOutputs"
    Inputs="@(BlazorOutputWithTargetPath)"
    Outputs="@(BlazorOutputWithTargetPath->'%(TargetOutputPath)')"
    AfterTargets="CopyFilesToOutputDirectory"
    Condition="'$(OutputType.ToLowerInvariant())'=='exe'">

    <!-- Copy the blazor output files  -->
    <Copy
      SourceFiles="@(BlazorOutputWithTargetPath)"
      DestinationFiles="@(BlazorOutputWithTargetPath->'%(TargetOutputPath)')"
      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
      UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
      Condition="'@(BlazorOutputWithTargetPath)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
    </Copy>

    <ItemGroup>
      <FileWrites Include="@(BlazorOutputWithTargetPath->'%(TargetOutputPath)')" />
    </ItemGroup>
  </Target>

  <Target 
    Name="_BlazorBuildReport"
    AfterTargets="_BlazorCopyFilesToOutputDirectory">

    <ItemGroup>
      <_BlazorStatisticsOutput Include="@(BlazorOutputWithTargetPath->'%(TargetOutputPath)')" />
    </ItemGroup>
    <PropertyGroup>
      <_BlazorStatisticsReportImportance Condition="'$(BlazorOutputStatistics)' == ''">normal</_BlazorStatisticsReportImportance>
      <_BlazorStatisticsReportImportance Condition="'$(BlazorOutputStatistics)' != ''">high</_BlazorStatisticsReportImportance>
    </PropertyGroup>

    <Message Importance="high" Text="Blazor Build result -> @(_BlazorStatisticsOutput->Distinct()->Count()) files in $(TargetDir)dist" />
    <Message Importance="$(_BlazorStatisticsReportImportance)" Text="%(_BlazorStatisticsOutput.Identity)" />
  </Target>

  <Target 
    Name="PrepareBlazorOutputs" 
    DependsOnTargets="_PrepareBlazorInputs;_ResolveBlazorOutputs;_GenerateBlazorBootJson">

    <ItemGroup>
      <MonoWasmFile Include="$(MonoWasmRuntimePath)**\*.*" />
      <BlazorOutputWithTargetPath Include="@(MonoWasmFile)">
        <TargetOutputPath>$(TargetDir)$(BaseBlazorRuntimeWasmOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </BlazorOutputWithTargetPath>
      <BlazorOutputWithTargetPath Include="$(BlazorJsPath);$(BlazorJSMapPath)">
        <TargetOutputPath>$(TargetDir)$(BaseBlazorJsOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </BlazorOutputWithTargetPath>
    </ItemGroup>

    <ItemGroup Label="Static content supplied by NuGet packages">
      <_BlazorPackageContentOutput Include="@(BlazorPackageContentFile)" Condition="%(SourcePackage) != ''">
        <TargetOutputPath>$(TargetDir)$(BaseBlazorPackageContentOutputPath)%(SourcePackage)\%(RecursiveDir)\%(Filename)%(Extension)</TargetOutputPath>
      </_BlazorPackageContentOutput>
      <BlazorOutputWithTargetPath Include="@(_BlazorPackageContentOutput)" />
    </ItemGroup>
  </Target>

  <Target Name="_PrepareBlazorInputs">
    <ItemGroup>
      <_BlazorDependencyInput Include="@(ReferenceCopyLocalPaths->WithMetadataValue('Extension','.dll')->'%(FullPath)')" />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveBlazorOutputs" DependsOnTargets="_ResolveBlazorOutputsWhenLinked;_ResolveBlazorOutputsWhenUnlinked" />

  <!--
  Linker enabled part of the pipeline:

  * If there are no descriptors defined, generate a new linker descriptor.
  * Invoke the linker and write linked files to a well-known directory.
  * Collect the outputs of the linker.
  -->

  <Target
    Name="_ResolveBlazorOutputsWhenLinked"
    Condition="'$(BlazorLinkOnBuild)' == 'true'"
    DependsOnTargets="_GenerateLinkerDescriptor;_LinkBlazorApplication">

    <!-- _BlazorLinkerOutputCache records files linked during the last incremental build of the target. Read the contents and assign linked files to be copied to the output. -->
    <ReadLinesFromFile File="$(_BlazorLinkerOutputCache)">
      <Output TaskParameter="Lines" ItemName="_BlazorLinkedFile"/>
    </ReadLinesFromFile>
      
    <ItemGroup>
      <BlazorOutputWithTargetPath Include="%(_BlazorLinkedFile.Identity)">
        <TargetOutputPath>$(BlazorRuntimeBinOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </BlazorOutputWithTargetPath>
    </ItemGroup>
  </Target>

  <Target Name="_GenerateLinkerDescriptor"
          Inputs="@(IntermediateAssembly)"
          Outputs="$(GeneratedBlazorLinkerDescriptor)"
          Condition="'@(BlazorLinkerDescriptor)' == ''">

    <!-- Generate linker descriptors if the project doesn't explicitly provide one. -->

    <ItemGroup>
      <_PrepareLinkerDescriptorAssemblyLine Include="@(IntermediateAssembly->'%(FileName)')" />
      <_GeneratedLinkerDescriptorLine Include="&lt;linker&gt;" />
      <_GeneratedLinkerDescriptorLine Include="@(_PrepareLinkerDescriptorAssemblyLine->'&lt;assembly fullname=&quot;%(Identity)&quot; /&gt;')" />
      <_GeneratedLinkerDescriptorLine Include="&lt;/linker&gt;" />
    </ItemGroup>

    <WriteLinesToFile
      Lines="@(_GeneratedLinkerDescriptorLine)"
      File="$(GeneratedBlazorLinkerDescriptor)"
      Overwrite="true"
      WriteOnlyWhenDifferent="True" />

    <ItemGroup>
      <FileWrites Include="$(GeneratedBlazorLinkerDescriptor)" />
    </ItemGroup>

    <ItemGroup>
      <BlazorLinkerDescriptor Include="$(_BlazorBuiltInBclLinkerDescriptor)" />
      <BlazorLinkerDescriptor Include="$(GeneratedBlazorLinkerDescriptor)" />
    </ItemGroup>
  </Target>

  <Target
      Name="_LinkBlazorApplication"
      Inputs="$(ProjectAssetsFile);
              @(IntermediateAssembly);
              @(_BlazorDependencyInput);
              @(BlazorLinkerDescriptor);
              $(MSBuildAllProjects)"
      Outputs="$(_BlazorLinkerOutputCache)">
    
    <ItemGroup>
      <_MonoBaseClassLibraryFolder Include="$(MonoBaseClassLibraryPath);$(MonoBaseClassLibraryFacadesPath);$(MonoWasmFrameworkPath)" />
      <_BlazorAssembliesToLink Include="@(_BlazorDependencyInput->'-a &quot;%(Identity)&quot;')" />
      <_BlazorAssembliesToLink Include="@(IntermediateAssembly->'-a &quot;%(FullPath)&quot;')" />
      <_BlazorFolderLookupPaths Include="@(_MonoBaseClassLibraryFolder->'-d &quot;%(Identity)&quot;')" />
      <_BlazorAssemblyDescriptorFiles
        Include="@(BlazorLinkerDescriptor->'-x &quot;%(FullPath)&quot;')" Condition="'@(BlazorLinkerDescriptor)' != ''" />
    </ItemGroup>

    <PropertyGroup>
      <_BlazorLinkerAdditionalOptions>-l $(MonoLinkerI18NAssemblies) $(AdditionalMonoLinkerOptions)</_BlazorLinkerAdditionalOptions>
    </PropertyGroup>

    <!-- Clear the contents of /obj/<<configuration>>/<<targetframework>>/blazor/blazor/linker -->
    <Delete Files="$(BlazorIntermediateLinkerOutputPath)*.dll" />

    <!-- Run the linker and put the results in /obj/<<configuration>>/<<targetframework>>/blazor/blazor/linker -->
    <Exec Command="dotnet &quot;$(MonoLinkerPath)&quot; $(_BlazorLinkerAdditionalOptions) @(_BlazorFolderLookupPaths, ' ') -o &quot;$(BlazorIntermediateLinkerOutputPath)&quot; @(_BlazorAssemblyDescriptorFiles, ' ') @(_BlazorAssembliesToLink, ' ')"  />

    <ItemGroup>
      <_LinkerResult Include="$(BlazorIntermediateLinkerOutputPath)*.dll" />
    </ItemGroup>

    <WriteLinesToFile File="$(_BlazorLinkerOutputCache)" Lines="@(_LinkerResult)" />
  </Target>

  <PropertyGroup>
    <_ResolveBlazorApplicationAssembliesCacheFile>$(IntermediateOutputPath)blazor.resolvedassemblies.cache</_ResolveBlazorApplicationAssembliesCacheFile>
  </PropertyGroup>

  <UsingTask TaskName="ResolveBlazorRuntimeDependencies" AssemblyFile="$(BlazorTasksPath)" />
  <Target
    Name="_ResolveBlazorOutputsWhenUnlinked"
    Condition="'$(BlazorLinkOnBuild)' != 'true'"
    Inputs="$(ProjectAssetsFile);
            @(IntermediateAssembly);
            @(_BlazorDependencyInput)"
    Outputs="$(_ResolveBlazorApplicationAssembliesCacheFile)">

    <!--
    At this point we have decided not to run the linker and instead to just copy the assemblies
    from the BCL referenced by the app the nuget package into the _framework/_bin folder.
    The only thing we need to do here is collect the list of items that will go into _framework/_bin.
    -->

    <ItemGroup>
      <_MonoBaseClassLibraryFolder Include="$(MonoBaseClassLibraryPath);$(MonoBaseClassLibraryFacadesPath);$(MonoWasmFrameworkPath)" />
      <_MonoBaseClassAssembly Include="%(_MonoBaseClassLibraryFolder.Identity)*.dll" />
    </ItemGroup>

    <ResolveBlazorRuntimeDependencies
      EntryPoint="@(IntermediateAssembly)"
      ApplicationDependencies="@(_BlazorDependencyInput)"
      MonoBCLAssemblies="@(_MonoBaseClassAssembly)">

      <Output TaskParameter="Dependencies" ItemName="_BlazorResolvedRuntimeDependencies" />
    </ResolveBlazorRuntimeDependencies>

    <ItemGroup>
      <BlazorOutputWithTargetPath Include="@(_BlazorResolvedRuntimeDependencies)">
        <TargetOutputPath>$(BlazorRuntimeBinOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </BlazorOutputWithTargetPath>
    </ItemGroup>

    <!-- Update a marker file used to track build incrementalism -->
    <Touch Files="$(_ResolveBlazorApplicationAssembliesCacheFile)" />

    <ItemGroup>
      <FileWrites Include="$(_ResolveBlazorApplicationAssembliesCacheFile)" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="GenerateBlazorBootJson" AssemblyFile="$(BlazorTasksPath)" />

  <Target
    Name="_GenerateBlazorBootJson"
    Inputs="@(BlazorOutputWithTargetPath)"
    Outputs="$(BlazorBootJsonIntermediateOutputPath)">
    <ItemGroup>
      <_AppReferences Include="@(BlazorOutputWithTargetPath->WithMetadataValue('Extension','.dll'))" />
      <_AppReferences Include="@(BlazorOutputWithTargetPath->WithMetadataValue('Extension','.pdb'))" Condition="'$(BlazorEnableDebugging)' == 'true'" />
    </ItemGroup>
    <PropertyGroup>
      <_BlazorLinkOnBuild Condition="'$(BlazorLinkOnBuild)' == 'true'">true</_BlazorLinkOnBuild>
      <_BlazorLinkOnBuild Condition="'$(_BlazorLinkOnBuild)' == ''">false</_BlazorLinkOnBuild>
    </PropertyGroup>

    <GenerateBlazorBootJson
      AssemblyPath="@(IntermediateAssembly)"
      References="@(_AppReferences)"
      LinkerEnabled="$(_BlazorLinkOnBuild)"
      OutputPath="$(BlazorBootJsonIntermediateOutputPath)" />

    <ItemGroup>
      <BlazorOutputWithTargetPath Include="$(BlazorBootJsonIntermediateOutputPath)" TargetOutputPath="$(TargetDir)$(BlazorBootJsonOutputPath)" Type="BootJson" />
      <FileWrites Include="$(BlazorBootJsonIntermediateOutputPath)" />
    </ItemGroup>
  </Target>

</Project>
